

namespace Audiomata.ComponentTrackers
{
    using Audiomata;
    //-------------------------------------------------------------------------------------------------------------------------------
    //					THIS CODE IS AUTOMATICALLY GENERATED, DO NOT MODIFY
    //-------------------------------------------------------------------------------------------------------------------------------
    using UnityEngine;

    // Auto generated props, can use reflections but don't because it is REALLY slow
    #region EnumeratedProps
    public enum AudioHighPassFilterMembers
    {
        enabled
        , cutoffFrequency
            , highpassResonanceQ

    }
    #endregion

    #region CommmandManager
    //Class to manage state of components
    public class AudioHighPassFilterCommander : IAudioCommandable
    {
        private LimitedStack<AudioCommand<AudioHighPassFilter>> audioCommands;
        public AudioHighPassFilter Target { get; private set; }

        public AudioHighPassFilterCommander()
        {
            audioCommands = new LimitedStack<AudioCommand<AudioHighPassFilter>>();
        }

        public object DoCommand<T>(T value, int enumeratedProp)
        {
            AudioCommand<AudioHighPassFilter> newCommand = CommandFactory(enumeratedProp);
            newCommand.Do(value);
            audioCommands.Push(newCommand);
            return newCommand;
        }

        public object RegisterCommand(int enumeratedProp)
        {
            AudioCommand<AudioHighPassFilter> newCommand = CommandFactory(enumeratedProp);
            audioCommands.Push(newCommand);
            return newCommand;
        }

        public void UndoCommand(object cmd)
        {
            AudioCommand<AudioHighPassFilter> command = (AudioCommand<AudioHighPassFilter>)cmd;
            command.Undo();
            audioCommands.Remove(command);
        }


        public void UndoLast()
        {
            if (audioCommands.Count < 1)
            {
                return;
            }

            AudioCommand<AudioHighPassFilter> popped = audioCommands.Pop();
            popped.Undo();
        }

        public void UndoAll()
        {
            while (audioCommands.Count > 0)
            {
                AudioCommand<AudioHighPassFilter> popped = audioCommands.Pop();
                popped.Undo();
            }
        }

        public void ClearChangeHistory()
        {
            while (audioCommands.Count > 0)
            {
                AudioCommand<AudioHighPassFilter> popped = audioCommands.Pop();
            }
        }

        private AudioCommand<AudioHighPassFilter> CommandFactory(int enumeratedProp)
        {
            AudioHighPassFilterMembers commandPropTarget = (AudioHighPassFilterMembers)enumeratedProp;
            AudioCommand<AudioHighPassFilter> nextCommand;
            switch (commandPropTarget)
            {
                case AudioHighPassFilterMembers.cutoffFrequency:
                    nextCommand = new AudioHighPassFilterCmdCutoffFrequency(Target);
                    return nextCommand;
                case AudioHighPassFilterMembers.highpassResonanceQ:
                    nextCommand = new AudioHighPassFilterCmdHighpassResonanceQ(Target);
                    return nextCommand;
                case AudioHighPassFilterMembers.enabled:
                    nextCommand = new AudioHighPassFilterCmdEnabled(Target);
                    return nextCommand;
                default:
                    return null;
            }
        }
    }

    #endregion

    #region AutoGeneratedCommands
    public class AudioHighPassFilterCmdCutoffFrequency : AudioCommand<AudioHighPassFilter>, IAudioCommand<float>
    {

        public float InitialValue { get; private set; }
        public float FinalValue { get; private set; }
        public CommandState CommandState { get; set; }


        public AudioHighPassFilterCmdCutoffFrequency(AudioHighPassFilter target)
        {
            Target = target;
        }

        public override void Do(object newValue)
        {
            InitialValue = Target.cutoffFrequency;
            FinalValue = (float)newValue;
            Target.cutoffFrequency = FinalValue;
        }

        public void Do(float newValue)
        {
            InitialValue = Target.cutoffFrequency;
            FinalValue = newValue;
            Target.cutoffFrequency = FinalValue;
        }

        public int TargetPropEnum()
        {
            return (int)AudioHighPassFilterMembers.cutoffFrequency;
        }

        public override void Undo()
        {
            Target.cutoffFrequency = InitialValue;
        }

        public override void Step(float t)
        {
            float diff = FinalValue - InitialValue;
            Target.cutoffFrequency = InitialValue + (t * diff);
        }

    }

    public class AudioHighPassFilterCmdHighpassResonanceQ : AudioCommand<AudioHighPassFilter>, IAudioCommand<float>
    {

        public float InitialValue { get; private set; }
        public float FinalValue { get; private set; }
        public CommandState CommandState { get; set; }


        public AudioHighPassFilterCmdHighpassResonanceQ(AudioHighPassFilter target)
        {
            Target = target;
        }

        public override void Do(object newValue)
        {
            InitialValue = Target.highpassResonanceQ;
            FinalValue = (float)newValue;
            Target.highpassResonanceQ = FinalValue;
        }

        public void Do(float newValue)
        {
            InitialValue = Target.highpassResonanceQ;
            FinalValue = newValue;
            Target.highpassResonanceQ = FinalValue;
        }

        public int TargetPropEnum()
        {
            return (int)AudioHighPassFilterMembers.highpassResonanceQ;
        }

        public override void Undo()
        {
            Target.highpassResonanceQ = InitialValue;
        }

        public override void Step(float t)
        {
            float diff = FinalValue - InitialValue;
            Target.highpassResonanceQ = InitialValue + (t * diff);
        }

    }

    public class AudioHighPassFilterCmdEnabled : AudioCommand<AudioHighPassFilter>, IAudioCommand<bool>
    {

        public bool InitialValue { get; private set; }
        public bool FinalValue { get; private set; }
        public CommandState CommandState { get; set; }


        public AudioHighPassFilterCmdEnabled(AudioHighPassFilter target)
        {
            Target = target;
        }

        public override void Do(object newValue)
        {
            InitialValue = Target.enabled;
            FinalValue = (bool)newValue;
            Target.enabled = FinalValue;
        }

        public void Do(bool newValue)
        {
            InitialValue = Target.enabled;
            FinalValue = newValue;
            Target.enabled = FinalValue;
        }

        public int TargetPropEnum()
        {
            return (int)AudioHighPassFilterMembers.enabled;
        }

        public override void Undo()
        {
            Target.enabled = InitialValue;
        }

    }

    #endregion
}


