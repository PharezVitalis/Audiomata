

namespace Audiomata.ComponentTrackers
{
    using Audiomata;
    //-------------------------------------------------------------------------------------------------------------------------------
    //					THIS CODE IS AUTOMATICALLY GENERATED, DO NOT MODIFY
    //-------------------------------------------------------------------------------------------------------------------------------
    using UnityEngine;

    // Auto generated props, can use reflections but don't because it is REALLY slow
    #region EnumeratedProps
    public enum AudioDistortionFilterMembers
    {
        enabled
        , distortionLevel

    }
    #endregion

    #region CommmandManager
    //Class to manage state of components
    public class AudioDistortionFilterCommander : IAudioCommandable
    {
        private LimitedStack<AudioCommand<AudioDistortionFilter>> audioCommands;
        public AudioDistortionFilter Target { get; private set; }

        public AudioDistortionFilterCommander()
        {
            audioCommands = new LimitedStack<AudioCommand<AudioDistortionFilter>>();
        }

        public object DoCommand<T>(T value, int enumeratedProp)
        {
            AudioCommand<AudioDistortionFilter> newCommand = CommandFactory(enumeratedProp);
            newCommand.Do(value);
            audioCommands.Push(newCommand);
            return newCommand;
        }

        public object RegisterCommand(int enumeratedProp)
        {
            AudioCommand<AudioDistortionFilter> newCommand = CommandFactory(enumeratedProp);
            audioCommands.Push(newCommand);
            return newCommand;
        }

        public void UndoCommand(object cmd)
        {
            AudioCommand<AudioDistortionFilter> command = (AudioCommand<AudioDistortionFilter>)cmd;
            command.Undo();
            audioCommands.Remove(command);
        }


        public void UndoLast()
        {
            if (audioCommands.Count < 1)
            {
                return;
            }

            AudioCommand<AudioDistortionFilter> popped = audioCommands.Pop();
            popped.Undo();
        }

        public void UndoAll()
        {
            while (audioCommands.Count > 0)
            {
                AudioCommand<AudioDistortionFilter> popped = audioCommands.Pop();
                popped.Undo();
            }
        }

        public void ClearChangeHistory()
        {
            while (audioCommands.Count > 0)
            {
                AudioCommand<AudioDistortionFilter> popped = audioCommands.Pop();
            }
        }

        private AudioCommand<AudioDistortionFilter> CommandFactory(int enumeratedProp)
        {
            AudioDistortionFilterMembers commandPropTarget = (AudioDistortionFilterMembers)enumeratedProp;
            AudioCommand<AudioDistortionFilter> nextCommand;
            switch (commandPropTarget)
            {
                case AudioDistortionFilterMembers.distortionLevel:
                    nextCommand = new AudioDistortionFilterCmdDistortionLevel(Target);
                    return nextCommand;
                case AudioDistortionFilterMembers.enabled:
                    nextCommand = new AudioDistortionFilterCmdEnabled(Target);
                    return nextCommand;
                default:
                    return null;
            }
        }
    }

    #endregion

    #region AutoGeneratedCommands
    public class AudioDistortionFilterCmdDistortionLevel : AudioCommand<AudioDistortionFilter>, IAudioCommand<float>
    {

        public float InitialValue { get; private set; }
        public float FinalValue { get; private set; }
        public CommandState CommandState { get; set; }


        public AudioDistortionFilterCmdDistortionLevel(AudioDistortionFilter target)
        {
            Target = target;
        }

        public override void Do(object newValue)
        {
            InitialValue = Target.distortionLevel;
            FinalValue = (float)newValue;
            Target.distortionLevel = FinalValue;
        }

        public void Do(float newValue)
        {
            InitialValue = Target.distortionLevel;
            FinalValue = newValue;
            Target.distortionLevel = FinalValue;
        }

        public int TargetPropEnum()
        {
            return (int)AudioDistortionFilterMembers.distortionLevel;
        }

        public override void Undo()
        {
            Target.distortionLevel = InitialValue;
        }

        public override void Step(float t)
        {
            float diff = FinalValue - InitialValue;
            Target.distortionLevel = InitialValue + (t * diff);
        }

    }

    public class AudioDistortionFilterCmdEnabled : AudioCommand<AudioDistortionFilter>, IAudioCommand<bool>
    {

        public bool InitialValue { get; private set; }
        public bool FinalValue { get; private set; }
        public CommandState CommandState { get; set; }


        public AudioDistortionFilterCmdEnabled(AudioDistortionFilter target)
        {
            Target = target;
        }

        public override void Do(object newValue)
        {
            InitialValue = Target.enabled;
            FinalValue = (bool)newValue;
            Target.enabled = FinalValue;
        }

        public void Do(bool newValue)
        {
            InitialValue = Target.enabled;
            FinalValue = newValue;
            Target.enabled = FinalValue;
        }

        public int TargetPropEnum()
        {
            return (int)AudioDistortionFilterMembers.enabled;
        }

        public override void Undo()
        {
            Target.enabled = InitialValue;
        }

    }

    #endregion
}


