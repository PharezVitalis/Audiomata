<#@ template language="C#" #>
<#@ import namespace="Audiomata.ComponentMapping" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="UnityEngine.Audio" #>
<#@ import namespace="UnityEngine" #>
namespace Audiomata.ComponentCommanders
{
//-----------------------------------------------------------------------------
//					THIS CODE IS AUTOMATICALLY GENERATED, DO NOT MODIFY
//-----------------------------------------------------------------------------

<#

AudioClassData[] classList = PropertyMapper.GenerateDefaultClassInfo();

for(int i =0; i<classList.Length; i++){
 AudioClassData nextClass = classList[i];
 string typeName = nextClass.propType.Name;
 string outClassName = typeName+"Commander";
 string enumName = typeName+"Props";
 #>
 public enum <=enumName=>
 {
	<# for (int j = 0; j<nextClass.publicProps.Length-2)
		#>
		<=nextClass.publicProps.Name+", "=>
	<#}#>
 }

 public class<=outClassName => :IAudioCommandable
 {
	Stack<AudioComman<<=nextClass.propType.Name=>>> audioCommands;
	public <=typeName=> Target { get; private set;}

	public <=outClassName=>(<=nextClass.propType.Name=> target)
	{
		Target = source;
		audioCommands = new Stack<AudioComman<<=nextClass.propType.Name=>>>();
	}

	//public void ExecuteCommand<T>(<=enumName=> targetProp, T targetValue)
 
 
 }

 <#
}
#>
}