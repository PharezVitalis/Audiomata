

namespace Audiomata.ComponentTrackers
{
//-------------------------------------------------------------------------------------------------------------------------------
//					THIS CODE IS AUTOMATICALLY GENERATED, DO NOT MODIFY
//-------------------------------------------------------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Audio;
using System.Collections.Generic;
using Audiomata;

 // Auto generated props, can use reflections but don't because it is REALLY slow
#region EnumeratedProps
 public enum AudioMixerGroupMembers
 {
	 }
#endregion

#region CommmandManager
 //Class to manage state of components
 public class AudioMixerGroupCommander :IAudioCommandable
 {
	private LimitedStack<AudioCommand<AudioMixerGroup> > audioCommands;
    public AudioMixerGroup Target{get;private set;}

    public object DoCommand<T>(T value, int enumeratedProp)
    {
        AudioCommand<AudioMixerGroup> newCommand = CommandFactory(enumeratedProp);
        newCommand.Do(value);
        audioCommands.Push(newCommand);
        return newCommand;
    }
    
    public object RegisterCommand(int enumeratedProp)
    {
        AudioCommand<AudioMixerGroup> newCommand = CommandFactory(enumeratedProp);
        audioCommands.Push(newCommand);
        return newCommand;
    }

    public void UndoCommand(object cmd)
    {
        AudioCommand<AudioMixerGroup> command = (AudioCommand<AudioMixerGroup>) cmd;
        command.Undo();
        audioCommands.Remove(command);
    }


    public void UndoLast()
    {
        if (audioCommands.Count<1)
        {
            return;
        }
        
        AudioCommand<AudioMixerGroup> popped = audioCommands.Pop();
        popped.Undo();
    }

    public void UndoAll()
    {
        while (audioCommands.Count>0)
        {
            AudioCommand<AudioMixerGroup> popped = audioCommands.Pop();
            popped.Undo();
        }
    }

    public void ClearChangeHistory()
    {
        while (audioCommands.Count>0)
        {
            AudioCommand<AudioMixerGroup> popped = audioCommands.Pop();
        }
    }

    private AudioCommand<AudioMixerGroup>CommandFactory(int enumeratedProp)
    {
        AudioMixerGroupMembers commandPropTarget = ( AudioMixerGroupMembers ) enumeratedProp;
            AudioCommand<AudioMixerGroup> nextCommand;
        switch(commandPropTarget){
                default:
            return null; 
      }
    }
 }

#endregion

#region AutoGeneratedCommands
	#endregion
}


