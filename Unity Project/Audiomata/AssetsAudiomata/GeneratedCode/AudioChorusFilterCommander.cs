

namespace Audiomata.ComponentTrackers
{
//-------------------------------------------------------------------------------------------------------------------------------
//					THIS CODE IS AUTOMATICALLY GENERATED, DO NOT MODIFY
//-------------------------------------------------------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Audio;
using System.Collections.Generic;
using Audiomata;

 // Auto generated props, can use reflections but don't because it is REALLY slow
#region EnumeratedProps
 public enum AudioChorusFilterMembers
 {
	          tag
		,dryMix
			,wetMix1
			,wetMix2
			,wetMix3
			,delay
			,rate
			,depth
		
	 }
#endregion

#region CommmandManager
 //Class to manage state of components
 public class AudioChorusFilterCommander :IAudioCommandable
 {
	private LimitedStack<AudioCommand<AudioChorusFilter> > audioCommands;
    public AudioChorusFilter Target{get;private set;}

    public object DoCommand<T>(T value, int enumeratedProp)
    {
        AudioCommand<AudioChorusFilter> newCommand = CommandFactory(enumeratedProp);
        newCommand.Do(value);
        audioCommands.Push(newCommand);
        return newCommand;
    }
    
    public object RegisterCommand(int enumeratedProp)
    {
        AudioCommand<AudioChorusFilter> newCommand = CommandFactory(enumeratedProp);
        audioCommands.Push(newCommand);
        return newCommand;
    }

    public void UndoCommand(object cmd)
    {
        AudioCommand<AudioChorusFilter> command = (AudioCommand<AudioChorusFilter>) cmd;
        command.Undo();
        audioCommands.Remove(command);
    }


    public void UndoLast()
    {
        if (audioCommands.Count<1)
        {
            return;
        }
        
        AudioCommand<AudioChorusFilter> popped = audioCommands.Pop();
        popped.Undo();
    }

    public void UndoAll()
    {
        while (audioCommands.Count>0)
        {
            AudioCommand<AudioChorusFilter> popped = audioCommands.Pop();
            popped.Undo();
        }
    }

    public void ClearChangeHistory()
    {
        while (audioCommands.Count>0)
        {
            AudioCommand<AudioChorusFilter> popped = audioCommands.Pop();
        }
    }

    private AudioCommand<AudioChorusFilter>CommandFactory(int enumeratedProp)
    {
        AudioChorusFilterMembers commandPropTarget = ( AudioChorusFilterMembers ) enumeratedProp;
            AudioCommand<AudioChorusFilter> nextCommand;
        switch(commandPropTarget){
                    case AudioChorusFilterMembers.dryMix:
                nextCommand = new AudioChorusFilterCmdDryMix(Target);
            return nextCommand;
               case AudioChorusFilterMembers.wetMix1:
                nextCommand = new AudioChorusFilterCmdWetMix1(Target);
            return nextCommand;
               case AudioChorusFilterMembers.wetMix2:
                nextCommand = new AudioChorusFilterCmdWetMix2(Target);
            return nextCommand;
               case AudioChorusFilterMembers.wetMix3:
                nextCommand = new AudioChorusFilterCmdWetMix3(Target);
            return nextCommand;
               case AudioChorusFilterMembers.delay:
                nextCommand = new AudioChorusFilterCmdDelay(Target);
            return nextCommand;
               case AudioChorusFilterMembers.rate:
                nextCommand = new AudioChorusFilterCmdRate(Target);
            return nextCommand;
               case AudioChorusFilterMembers.depth:
                nextCommand = new AudioChorusFilterCmdDepth(Target);
            return nextCommand;
               case AudioChorusFilterMembers.enabled:
                nextCommand = new AudioChorusFilterCmdEnabled(Target);
            return nextCommand;
               case AudioChorusFilterMembers.tag:
                nextCommand = new AudioChorusFilterCmdTag(Target);
            return nextCommand;
           default:
            return null; 
      }
    }
 }

#endregion

#region AutoGeneratedCommands
		public class AudioChorusFilterCmdDryMix : AudioCommand< AudioChorusFilter >,IAudioCommand< float >
{

	public float InitialValue { get; private set; }
	public float FinalValue { get; private set; }
	public CommandState CommandState {get;set;}
    

	public AudioChorusFilterCmdDryMix(AudioChorusFilter target){
		Target = target;
	}

	public override void Do(object newValue){
		InitialValue = Target.dryMix;
		FinalValue = (float) newValue;
		Target.dryMix = FinalValue;
	}

	public void Do(float newValue){
		InitialValue = Target.dryMix;
		FinalValue = newValue;
		Target.dryMix = FinalValue;
	}

	public int TargetPropEnum()
	{
		return (int)AudioChorusFilterMembers.dryMix;
	}

	public override void Undo(){
	Target.dryMix = InitialValue;
	}
    
    public override void Step(float t){
            float diff = FinalValue - InitialValue;
                    Target.dryMix = InitialValue+(t*diff);
         }
 
}
   
		public class AudioChorusFilterCmdWetMix1 : AudioCommand< AudioChorusFilter >,IAudioCommand< float >
{

	public float InitialValue { get; private set; }
	public float FinalValue { get; private set; }
	public CommandState CommandState {get;set;}
    

	public AudioChorusFilterCmdWetMix1(AudioChorusFilter target){
		Target = target;
	}

	public override void Do(object newValue){
		InitialValue = Target.wetMix1;
		FinalValue = (float) newValue;
		Target.wetMix1 = FinalValue;
	}

	public void Do(float newValue){
		InitialValue = Target.wetMix1;
		FinalValue = newValue;
		Target.wetMix1 = FinalValue;
	}

	public int TargetPropEnum()
	{
		return (int)AudioChorusFilterMembers.wetMix1;
	}

	public override void Undo(){
	Target.wetMix1 = InitialValue;
	}
    
    public override void Step(float t){
            float diff = FinalValue - InitialValue;
                    Target.wetMix1 = InitialValue+(t*diff);
         }
 
}
   
		public class AudioChorusFilterCmdWetMix2 : AudioCommand< AudioChorusFilter >,IAudioCommand< float >
{

	public float InitialValue { get; private set; }
	public float FinalValue { get; private set; }
	public CommandState CommandState {get;set;}
    

	public AudioChorusFilterCmdWetMix2(AudioChorusFilter target){
		Target = target;
	}

	public override void Do(object newValue){
		InitialValue = Target.wetMix2;
		FinalValue = (float) newValue;
		Target.wetMix2 = FinalValue;
	}

	public void Do(float newValue){
		InitialValue = Target.wetMix2;
		FinalValue = newValue;
		Target.wetMix2 = FinalValue;
	}

	public int TargetPropEnum()
	{
		return (int)AudioChorusFilterMembers.wetMix2;
	}

	public override void Undo(){
	Target.wetMix2 = InitialValue;
	}
    
    public override void Step(float t){
            float diff = FinalValue - InitialValue;
                    Target.wetMix2 = InitialValue+(t*diff);
         }
 
}
   
		public class AudioChorusFilterCmdWetMix3 : AudioCommand< AudioChorusFilter >,IAudioCommand< float >
{

	public float InitialValue { get; private set; }
	public float FinalValue { get; private set; }
	public CommandState CommandState {get;set;}
    

	public AudioChorusFilterCmdWetMix3(AudioChorusFilter target){
		Target = target;
	}

	public override void Do(object newValue){
		InitialValue = Target.wetMix3;
		FinalValue = (float) newValue;
		Target.wetMix3 = FinalValue;
	}

	public void Do(float newValue){
		InitialValue = Target.wetMix3;
		FinalValue = newValue;
		Target.wetMix3 = FinalValue;
	}

	public int TargetPropEnum()
	{
		return (int)AudioChorusFilterMembers.wetMix3;
	}

	public override void Undo(){
	Target.wetMix3 = InitialValue;
	}
    
    public override void Step(float t){
            float diff = FinalValue - InitialValue;
                    Target.wetMix3 = InitialValue+(t*diff);
         }
 
}
   
		public class AudioChorusFilterCmdDelay : AudioCommand< AudioChorusFilter >,IAudioCommand< float >
{

	public float InitialValue { get; private set; }
	public float FinalValue { get; private set; }
	public CommandState CommandState {get;set;}
    

	public AudioChorusFilterCmdDelay(AudioChorusFilter target){
		Target = target;
	}

	public override void Do(object newValue){
		InitialValue = Target.delay;
		FinalValue = (float) newValue;
		Target.delay = FinalValue;
	}

	public void Do(float newValue){
		InitialValue = Target.delay;
		FinalValue = newValue;
		Target.delay = FinalValue;
	}

	public int TargetPropEnum()
	{
		return (int)AudioChorusFilterMembers.delay;
	}

	public override void Undo(){
	Target.delay = InitialValue;
	}
    
    public override void Step(float t){
            float diff = FinalValue - InitialValue;
                    Target.delay = InitialValue+(t*diff);
         }
 
}
   
		public class AudioChorusFilterCmdRate : AudioCommand< AudioChorusFilter >,IAudioCommand< float >
{

	public float InitialValue { get; private set; }
	public float FinalValue { get; private set; }
	public CommandState CommandState {get;set;}
    

	public AudioChorusFilterCmdRate(AudioChorusFilter target){
		Target = target;
	}

	public override void Do(object newValue){
		InitialValue = Target.rate;
		FinalValue = (float) newValue;
		Target.rate = FinalValue;
	}

	public void Do(float newValue){
		InitialValue = Target.rate;
		FinalValue = newValue;
		Target.rate = FinalValue;
	}

	public int TargetPropEnum()
	{
		return (int)AudioChorusFilterMembers.rate;
	}

	public override void Undo(){
	Target.rate = InitialValue;
	}
    
    public override void Step(float t){
            float diff = FinalValue - InitialValue;
                    Target.rate = InitialValue+(t*diff);
         }
 
}
   
		public class AudioChorusFilterCmdDepth : AudioCommand< AudioChorusFilter >,IAudioCommand< float >
{

	public float InitialValue { get; private set; }
	public float FinalValue { get; private set; }
	public CommandState CommandState {get;set;}
    

	public AudioChorusFilterCmdDepth(AudioChorusFilter target){
		Target = target;
	}

	public override void Do(object newValue){
		InitialValue = Target.depth;
		FinalValue = (float) newValue;
		Target.depth = FinalValue;
	}

	public void Do(float newValue){
		InitialValue = Target.depth;
		FinalValue = newValue;
		Target.depth = FinalValue;
	}

	public int TargetPropEnum()
	{
		return (int)AudioChorusFilterMembers.depth;
	}

	public override void Undo(){
	Target.depth = InitialValue;
	}
    
    public override void Step(float t){
            float diff = FinalValue - InitialValue;
                    Target.depth = InitialValue+(t*diff);
         }
 
}
   
		public class AudioChorusFilterCmdEnabled : AudioCommand< AudioChorusFilter >,IAudioCommand< bool >
{

	public bool InitialValue { get; private set; }
	public bool FinalValue { get; private set; }
	public CommandState CommandState {get;set;}
    

	public AudioChorusFilterCmdEnabled(AudioChorusFilter target){
		Target = target;
	}

	public override void Do(object newValue){
		InitialValue = Target.enabled;
		FinalValue = (bool) newValue;
		Target.enabled = FinalValue;
	}

	public void Do(bool newValue){
		InitialValue = Target.enabled;
		FinalValue = newValue;
		Target.enabled = FinalValue;
	}

	public int TargetPropEnum()
	{
		return (int)AudioChorusFilterMembers.enabled;
	}

	public override void Undo(){
	Target.enabled = InitialValue;
	}
    
}
   
		public class AudioChorusFilterCmdTag : AudioCommand< AudioChorusFilter >,IAudioCommand< string >
{

	public string InitialValue { get; private set; }
	public string FinalValue { get; private set; }
	public CommandState CommandState {get;set;}
    

	public AudioChorusFilterCmdTag(AudioChorusFilter target){
		Target = target;
	}

	public override void Do(object newValue){
		InitialValue = Target.tag;
		FinalValue = (string) newValue;
		Target.tag = FinalValue;
	}

	public void Do(string newValue){
		InitialValue = Target.tag;
		FinalValue = newValue;
		Target.tag = FinalValue;
	}

	public int TargetPropEnum()
	{
		return (int)AudioChorusFilterMembers.tag;
	}

	public override void Undo(){
	Target.tag = InitialValue;
	}
    
}
   
	#endregion
}


